import net.minecraftforge.gradle.userdev.UserDevPlugin
import net.minecraftforge.gradle.userdev.util.DependencyRemapper
import org.codehaus.plexus.util.IOUtil

import java.nio.file.Files
import java.nio.file.Paths
import java.util.zip.ZipEntry
import java.util.zip.ZipInputStream
import java.util.zip.ZipOutputStream

buildscript {
    repositories {
        maven { url 'https://files.minecraftforge.net/maven' }
        maven { url = 'https://dist.creeper.host/Sponge/maven' }
        maven { url 'https://plugins.gradle.org/m2/' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'


version = '1.0'
group = 'io.github.noeppi_noeppi.mythicbotany'
archivesBaseName = 'MythicBotany-1.16.1'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

mixin {
    add sourceSets.main, "botania.refmap.json"
}

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'snapshot', version: '20200707-1.16.1'/*'20200514-1.16'*/
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('runClient')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                mythicbotany {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('runServer')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                mythicbotany {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('runData')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'mythicbotany', '--all', '--output', file('src/generated/resources/'), "--existing", file("src/main/resources")

            mods {
                mythicbotany {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

repositories {
    maven {
        name = 'Forge'
        url = 'https://files.minecraftforge.net/maven/'
    }
    maven {
        // location of the maven that hosts JEI files
        name = 'Progwml6 maven'
        url = 'https://dvs1.progwml6.com/files/maven/'
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = 'ModMaven'
        url = 'https://modmaven.k-4u.nl'
    }
    maven {
        name = 'botania'
        url = 'https://maven.blamejared.com/'
    }
    maven {
        name = 'curios'
        url = 'https://maven.theillusivec4.top/'
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.16.1-32.0.106'

    compileOnly fg.deobf('mezz.jei:jei-1.16.1:7.0.0.6:api')
    compile fg.deobf('vazkii.botania:Botania:1.16-399')
    compile fg.deobf('vazkii.patchouli:Patchouli:1.16-36.190')
    compile fg.deobf('top.theillusivec4.curios:curios:FORGE-1.16.1-3.0.0.2')

    runtimeOnly fg.deobf('mezz.jei:jei-1.16.1:7.0.0.6')
}

task removeMixinMappings {
    dependsOn reobf

    doLast {
        println("Removing mixin mappings from dependencies.")
        configurations.compile.each { dep ->
            if (!dep.getName().toLowerCase().contains('_mapped_')) {
                println("Skipping non-remapped dependency ${dep}.")
                return
            }
            println("Removing mixin mappings from ${dep}.")
            Files.copy(dep.toPath(), dep.toPath().getParent().resolve(dep.getName() + '.withmixinmap'))
            ZipInputStream zin = new ZipInputStream(Files.newInputStream(dep.toPath().getParent().resolve(dep.getName() + '.withmixinmap')))
            ZipOutputStream zout = new ZipOutputStream(dep.newOutputStream())
            for (ZipEntry entry = zin.getNextEntry(); entry != null; entry = zin.getNextEntry()) {
                if (entry.name.endsWith('.refmap.json'))
                    continue
                zout.putNextEntry(new ZipEntry(entry))
                IOUtil.copy(zin, zout)
                zout.closeEntry()
            }
            zin.close()
            zout.close()
        }
    }
}

task setup {
    // Meta task
    dependsOn removeMixinMappings
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                'Specification-Title'     : 'mythicbotany',
                'Specification-Vendor'    : 'noeppi_noeppi',
                'Specification-Version'   : '1', // We are version 1 of ourselves
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.version,
                'Implementation-Vendor'   : 'noeppi_noeppi',
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}